{"version":3,"sources":["components/Widget.jsx","components/chart.jsx","components/Main.jsx","components/Enterprises.jsx","App.js","serviceWorker.js","index.js"],"names":["Widget","props","className","label","amount","fontSize","data","name","uv","pv","amt","chart","width","height","dataKey","stroke","strokeDasharray","type","Main","map","widget","Enterprises","useState","enterprises","setEnterprises","useEffect","fetch","then","json","results","console","log","enterprise","id","useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","ResponsiveDrawer","container","classes","useTheme","React","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","text","index","to","ListItem","button","key","ListItemIcon","ListItemText","primary","basename","CssBaseline","AppBar","position","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00de5fb0.chunk.js","sourcesContent":["import React from 'react'\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nexport default function Widget(props) {\r\n    return (\r\n        <div className=\"admin-widget\">\r\n            <h2>{props.label}</h2>\r\n            <h1> {props.amount}</h1>\r\n            <div> <AccountCircleIcon fontSize='large'/> </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts'\r\n\r\nconst data = [{ name: 'Page A', uv: 200, pv: 2400, amt: 2400 }, { name: 'Page B', uv: 600, pv: 2400, amt: 2400 }, { name: 'Page A', uv: 1500, pv: 2400, amt: 2400 }, { name: 'Page A', uv: 400, pv: 2400, amt: 2400 }, { name: 'Page A', uv: 200, pv: 2400, amt: 2400 },];\r\n\r\n\r\nexport default function chart() {\r\n    return (\r\n        <div>\r\n            <LineChart width={950} height={300} data={data}>\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n                <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Widget from './Widget'\r\nimport Chart from './chart'\r\n\r\nexport default function Main() {\r\n    const data = [\r\n        {\r\n            label: 'Logged in agents',\r\n            amount: 2,\r\n        },\r\n        {\r\n            label: 'Logged in agents',\r\n            amount: 2,\r\n        },\r\n        {\r\n            label: 'Logged in agents',\r\n            amount: 2,\r\n        },\r\n        {\r\n            label: 'Logged in agents',\r\n            amount: 2,\r\n        },\r\n        {\r\n            label: 'Logged in agents',\r\n            amount: 2,\r\n        },\r\n\r\n\r\n\r\n\r\n    ]\r\n    return (\r\n        <div>\r\n            <div className=\"widgets-header\">\r\n                {data.map((widget) => {\r\n                    return (<Widget label={widget.label} amount={widget.amount} />)\r\n                })}\r\n            </div>\r\n            <div>\r\n                <Chart></Chart>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n\r\nexport default function Enterprises(props) {\r\n\r\n    const [enterprises, setEnterprises] = useState({enterprises:[]});\r\n    useEffect(() => {\r\n        fetch(\"/api/enterprises/\")\r\n        .then(enterprises => enterprises.json())\r\n        .then(enterprises => enterprises.results)\r\n        .then(enterprises => setEnterprises( {enterprises }))\r\n        console.log((enterprises));\r\n        \r\n    } , [])\r\n    console.log((enterprises.enterprises));\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n                    {enterprises.enterprises.map(enterprise => <div className=\"table\"> <span> {enterprise.id} </span> <span>{enterprise.name} </span></div>)}\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Main from './components/Main'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './Admin.css'\nimport Enterprises from './components/Enterprises'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction ResponsiveDrawer(props) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {['Home', 'Enterprises', 'Agents','rooms', 'Reports'].map((text, index) => (\n           <Link to={'/' + text}>\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          </Link>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n   \n    <div className={classes.root}>\n            <Router basename=\"admin\">\n\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n          \n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Nespresso Callaby admin\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n\n      {/* start router  */}\n\n        <Switch>\n        <div className=\"admin-content\">\n\n          <Route exact path=\"/Home\">\n              <Main></Main>\n          </Route>\n\n          <Route path=\"/Enterprises\">\n              <Enterprises/>\n          </Route>\n          \n       </div>\n       </Switch>\n       </Router>\n\n\n    </div>\n  );\n}\n\nResponsiveDrawer.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\n};\n\nexport default ResponsiveDrawer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}