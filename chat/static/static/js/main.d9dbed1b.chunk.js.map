{"version":3,"sources":["components/AgentStatus.jsx","components/Details.jsx","components/Message.jsx","components/Chat.jsx","components/ProductList.jsx","components/Carousel.jsx","components/Tabs.jsx","components/ChatController.jsx","components/AgentHome.jsx","App.js","serviceWorker.js","index.js"],"names":["AgentStatus","props","className","src","alt","user","first_name","last_name","Details","style","fontWeight","width","paddingLeft","message","author","content","Chat","messages","handleChange","handleKeyUp","chatInput","React","createRef","map","i","key","ref","el","type","autoComplete","id","value","onChange","e","onKeyUp","ProductList","products","product","index","image_url","image_alt","name","price","carousel","Tabs","chats","toggleChat","chat","onClick","ChatController","console","log","state","activeChat","push","sendMessage","setState","chatSocket","WebSocket","this","target","innerHTML","msg","send","JSON","stringify","onopen","onmessage","data","parse","body","room_id","close","Object","keys","Component","AgentHome","href","App","role","fetch","then","json","loggedIn","ws_url","wsUrl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9dbed1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function AgentStatus(props) {\r\n    return (\r\n        <div className=\"agent-area\">\r\n            <div>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ9MVF1euuahaAdL4r6Y4P4PaVdewuQlhn1MoPjL8bMEyJxI_Aq\" className=\"agent-avatar\" alt=\"agent-avatar\" />\r\n            </div>\r\n            <div className=\"agent-details\">\r\n                <div className=\"agent-name\">\r\n                    {\r\n                        props.user\r\n                            ? (\r\n                                <>\r\n                                    {props.user.first_name}\r\n                                    {' '}\r\n                                    {props.user.last_name}\r\n                                    {' '}\r\n                                </>\r\n                            )\r\n                            : null\r\n\r\n                    }\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"status-bubble\" />\r\n                    Available\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Details() {\r\n    return (\r\n        <div className=\"details\">\r\n            <div className=\"details-item\"> <div style={{fontWeight:\"bold\" , width:\"110px\" , paddingLeft : \"5px\"}}>Customer</div><div> David </div></div>\r\n            <div className=\"details-item\"> <div style={{fontWeight:\"bold\" , width:\"110px\" , paddingLeft : \"5px\"}}>Skill</div> <div> Coffee machine</div></div>\r\n            <div className=\"details-item\"> <div style={{fontWeight:\"bold\" , width:\"110px\" , paddingLeft : \"5px\"}}>call duration</div> <div> 01:24 </div></div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function message(props) {\r\n    return (\r\n        <div className={`chat-bubble ${props.author}`}>{props.content}</div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Message from './Message';\r\n\r\nexport default function Chat(props) {\r\n    const { messages } = props;\r\n    const { handleChange } = props;\r\n    const { handleKeyUp } = props;\r\n    const { chatInput } = props;\r\n\r\n    let mesRef = React.createRef();\r\n\r\n    const scrollToBottom = () => {\r\n        mesRef.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"chat-box\">\r\n                {\r\n                    messages\r\n                        ? messages.map((message, i) => (<Message key={i} content={message} author=\"sender\" />))\r\n                        : <div> You are here alone </div>\r\n                }\r\n                {}\r\n\r\n                <div className=\"dummy\" ref={(el) => { mesRef = el; }} />\r\n            </div>\r\n            <div>\r\n                <input type=\"text\" autoComplete=\"off\" className=\"chat-input\" id=\"chat-message-input\" value={chatInput} onChange={(e) => handleChange(e)} onKeyUp={(e) => handleKeyUp(e)} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// import React, { Component } from 'react'\r\n// import Message from './Message';\r\n\r\n\r\n// export default class Chat extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.props = props;\r\n//         this.mesRef = React.createRef();\r\n//     }\r\n\r\n//     componentDidUpdate(){\r\n//         this.scrollToBottom()\r\n\r\n//     }\r\n\r\n//     scrollToBottom = () => {\r\n//         this.messageEnd.scrollIntoView({ behavior: 'smooth' })\r\n//       }\r\n\r\n\r\n//     sendMessage = () => {\r\n//         const msg = {\r\n//             'type': 'message',\r\n//             'body': {\r\n//                 'message': this.state.chatInput,\r\n//                 'room_id': 0\r\n//             }\r\n//         }\r\n//         this.setState((state)=>{\r\n\r\n//             return {\r\n//                 chatMessages: [...state.chatMessages, msg],\r\n//                 chatInput: ''\r\n//             }\r\n//         } ,() => this.scrollToBottom()\r\n//         )\r\n//         this.chatSocket.send(JSON.stringify(msg));\r\n\r\n//     };\r\n\r\n//     handleKeyUp = (e) =>{\r\n//         if (e.key === 'Enter') {\r\n//             this.sendMessage();\r\n//         }\r\n//     }\r\n\r\n//     handleChange = (e) =>{\r\n//         this.setState({chatInput:e.target.value })\r\n//     }\r\n\r\n\r\n//     componentDidMount() {\r\n//         fetch('/api/messages/')\r\n//         .then((chatMessages) => chatMessages.json())\r\n//         .then(chatMessages => chatMessages = chatMessages['results'])\r\n//         .then((chatMessages) => this.setState({ chatMessages }));\r\n//         this.scrollToBottom()\r\n\r\n//         this.chatSocket.onopen = (e) => {\r\n//             console.log(e);\r\n//         }\r\n\r\n\r\n//         this.chatSocket.onmessage = (e) => {\r\n//             const data = JSON.parse(e.data);\r\n//             console.log(data);\r\n\r\n//             this.setState((state)=>{\r\n\r\n//                 return {\r\n//                     chatMessages: [...state.chatMessages, data],\r\n//                 }\r\n//             })\r\n\r\n//             // console.log(message)\r\n//             // let arrMSG = [...this.state.chatMessages]\r\n//             // arrMSG.push(message)\r\n//             // this.setState({chatMessages: arrMSG})\r\n//         };\r\n\r\n\r\n//     }\r\n//     componentWillUnmount() {\r\n//         this.chatSocket.close();\r\n//         this.chatSocket = null\r\n\r\n//         this.chatSocket.send(JSON.stringify({\r\n//             'message': 'close',\r\n//             'agent':'Omer Daniel',\r\n//             'customer': 'unknown_customer',\r\n//             'chat_id': \"{{ room_name|escapejs }}\"\r\n//         }));\r\n\r\n//     }\r\n\r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <div className=\"chat-box\" >\r\n//                     {this.state.chatMessages.map((message,i) => {\r\n//                         return(<Message key={i} content={message.message} author=\"sender\" />)\r\n//                     })}\r\n\r\n//                 <div className=\"dummy\" ref={(el) => {this.messageEnd= el;}}></div>\r\n//                 </div>\r\n//                 <div>\r\n//                         <input type=\"text\" autoComplete=\"off\" className=\"chat-input\" value={this.state.chatInput} id=\"chat-message-input\" onChange={this.handleChange} onKeyUp={this.handleKeyUp}/>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n","import React from 'react';\r\n\r\nexport default function ProductList(props) {\r\n    return (\r\n        <div className=\"products-list\">\r\n            {\r\n                props.products.map((product, index) => (\r\n                    <>\r\n                        <div className=\"product\" key={index}>\r\n                            <div className=\"product-pic\">\r\n                                <img src={product.image_url} alt={product.image_alt} className=\"product-image\" />\r\n                            </div>\r\n                            <div className=\"product-details\">\r\n                                <div>\r\n                                    {product.name}\r\n                                    {' '}\r\n                                </div>\r\n                                <div>\r\n                                    {product.price}\r\n$\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport ProductList from './ProductList'\r\n\r\nexport default function carousel(props) {\r\n    return (\r\n        <div className=\"carousel\">\r\n            <h2> {'<'} Products ></h2>\r\n            <ProductList products={props.products}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Tabs(props) {\r\n    const { chats } = props;\r\n    const { toggleChat } = props;\r\n    return (\r\n        <div className=\"tabs\">\r\n            {\r\n                chats.map((chat, i) => (\r\n                    <div className=\"tab\" key={i} onClick={(e) => toggleChat(e)}>\r\n                        {chat}\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Chat from './Chat';\r\nimport Tabs from './Tabs';\r\n\r\nconst wsUrl = 'ws://localhost:8000/ws/chat/';\r\n\r\n\r\nexport default class ChatController extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.chatSocket = new WebSocket(`${wsUrl}`);\r\n\r\n        this.state = {\r\n            chats: {},\r\n            activeChat: '200',\r\n            chatInput: '',\r\n        };\r\n    }\r\n\r\n    toggleChat(e){\r\n        this.setState({activeChat: e.target.innerHTML})\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ chatInput: e.target.value });\r\n    }\r\n\r\n    sendMessage ()  {\r\n        const msg = {\r\n                    'type': 'message',\r\n                    'body': {\r\n                        'message': this.state.chatInput,\r\n                        'room_id': this.state.activeChat\r\n                    }\r\n     }\r\n     this.chatSocket.send(JSON.stringify(msg));\r\n    }\r\n    \r\n\r\n    handleKeyUp = (e) =>{\r\n        if (e.key === 'Enter') {\r\n            console.log(this.state.chats[this.state.activeChat]);\r\n            this.state.chats[this.state.activeChat].push(this.state.chatInput);\r\n            this.sendMessage ()\r\n            this.setState({chatInput:''})\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.chatSocket.onopen = (e) => {\r\n            console.log(e);\r\n        }\r\n\r\n        this.chatSocket.onmessage = (e) => {\r\n            const data = JSON.parse(e.data);\r\n            console.log(`data: ${data}`);\r\n            if (data.type === \"connect\"){\r\n                const chats = {...this.state.chats}\r\n                chats[data.body.room_id] = []\r\n                this.setState({chats:chats})\r\n            }\r\n            if (data.type === \"message\"){\r\n                const chats = {...this.state.chats}\r\n                chats[data.body.room_id].push(data.body.message)\r\n                this.setState({chats:chats})\r\n            }\r\n        }\r\n        \r\n    }\r\n    componentWillUnmount() {\r\n        this.chatSocket.close();\r\n        this.chatSocket = null\r\n        }\r\n    \r\n\r\n    render() {\r\n        const { chats } = this.state;\r\n        const {activeChat} = this.state;\r\n\r\n\r\n        return (\r\n            <>\r\n                <Tabs chats={Object.keys(chats)} toggleChat={(e)=> this.toggleChat(e)} />\r\n                <Chat \r\n                    messages={chats[activeChat]} \r\n                    handleChange={(e) => this.handleChange(e)} \r\n                    handleKeyUp={this.handleKeyUp} \r\n                    chatInput = {this.state.chatInput}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport AgentStatus from './AgentStatus';\r\nimport Details from './Details';\r\nimport Chat from './Chat';\r\nimport Carusel from './Carousel';\r\nimport ChatController from './ChatController';\r\n\r\n\r\nexport default function AgentHome(props) {\r\n    return (\r\n        <div className=\"agent-home\">\r\n            <div className=\"left\">\r\n                <AgentStatus user={props.user} />\r\n                <Details />\r\n            </div>\r\n            <div className=\"center\">\r\n                <ChatController />\r\n            </div>\r\n            <div className=\"right\">\r\n                <a href=\"/accounts/logout/\">logout</a>\r\n                <Carusel products={props.products} />\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport Login from './components/Login';\nimport AgentHome from './components/AgentHome';\nimport './App.css';\nimport products from './Data/products.json';\n\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            user: null,\n            role: 2,\n        };\n\n    }\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillMount() {\n        fetch('/whoami/')\n            .then((user) => user.json())\n            .then((user) => this.setState({ user }));\n    }\n\n\n    toggleLogin() {\n        this.setState((state) => ({ loggedIn: !state.loggedIn }));\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <AgentHome products={products} user={this.state.user} ws_url={this.wsUrl} />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}